name: Deploy Lambda to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  remote-config:
    name: "Get Database Configuration"
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get database configuration from Parameter Store
        run: |
          # Get database configuration from SSM Parameter Store
          aws ssm get-parameter --name "/main/rds_endpoint" --with-decryption --query "Parameter.Value" --output text > /tmp/db_host 2>/dev/null || echo "" > /tmp/db_host
          aws ssm get-parameter --name "/main/db_username" --with-decryption --query "Parameter.Value" --output text > /tmp/db_user 2>/dev/null || echo "" > /tmp/db_user
          aws ssm get-parameter --name "/main/db_password" --with-decryption --query "Parameter.Value" --output text > /tmp/db_password 2>/dev/null || echo "" > /tmp/db_password

          # Clean values (remove newlines and whitespace)
          sed -i 's/[[:space:]]*$//' /tmp/db_host /tmp/db_user /tmp/db_password

          # Verify required values are present
          if [ ! -s /tmp/db_host ]; then
            echo "❌ ERROR: Database host not found in Parameter Store"
            exit 1
          fi

          echo "✅ Database configuration retrieved successfully"

      - name: Upload database config as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: db-config
          path: |
            /tmp/db_host
            /tmp/db_user
            /tmp/db_password
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: remote-config

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download database config
        uses: actions/download-artifact@v4
        with:
          name: db-config
          path: /tmp/

      - name: Load database configuration
        run: |
          # Load database configuration from artifacts (values will be masked)
          echo "::add-mask::$(cat /tmp/db_host)"
          echo "::add-mask::$(cat /tmp/db_user)"
          echo "::add-mask::$(cat /tmp/db_password)"

          echo "DB_HOST_VALUE=$(cat /tmp/db_host)" >> $GITHUB_ENV
          echo "DB_USER_VALUE=$(cat /tmp/db_user)" >> $GITHUB_ENV
          echo "DB_PASSWORD_VALUE=$(cat /tmp/db_password)" >> $GITHUB_ENV
          echo "✅ Database configuration loaded"

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Deploy Lambda Function
        run: sls deploy --stage main --config serverless-prod.yml
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
          DB_HOST: ${{ env.DB_HOST_VALUE }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ env.DB_USER_VALUE }}
          DB_PASSWORD: ${{ env.DB_PASSWORD_VALUE }}
